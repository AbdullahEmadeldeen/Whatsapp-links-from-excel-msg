# streamlit_phone_extractor.py
# -------------------------------------------------------------
# ุชุทุจูู Streamlit ูุงุณุชุฎุฑุงุฌ ุฃุฑูุงู ุงูููุจุงูู ูู ููู .xlsx ูุจูุงุก ุฑูุงุจุท ูุงุชุณุงุจ
# ูุน ุฑุณุงูุฉ ุนุฑุจูุฉ ุฌุงูุฒุฉ + ุนุฑุถ ุงูุฑูุงุจุท ูุฃุฒุฑุงุฑ (ููุณ ูุฃุนูุฏุฉ).
#
# ูุฎุทุท ุงูููู (ุณุทุฑ ุงูุนูุงููู ูู ุงูุตู ุงูุฃูู):
#   - ุงูุนููุฏ 1: ููุงุญุธุงุช (ุชูุถุงู ููุง ูู ุฅูู ุฌููุฉ ุงููููุงุช)
#   - ุงูุนููุฏ 4: ุงูุฅุฌูุงูู (total)
#   - ุงูุฃุนูุฏุฉ 5..12: ุฃุณูุงุก ุงูุฃุตูุงู (ูู ุตู ุงูุนูุงููู) ูุงูููู/ุงููููุงุช ุจุงูุตููู ุงูุชุงููุฉ
#   - ูู ุตู = ุฃูุฑุฏุฑ ูุงุญุฏ
#
# ุงููุงุชุฌ ููุชูุฒูู: ููู ุฅูุณู ุจุนููุฏูู ููุท (ุฑูู ุงููุงุชูุ ุฑุงุจุท ูุงุชุณุงุจ ูุน ?text=)
# ูุชุทูุจ: streamlit, pandas, openpyxl
# -------------------------------------------------------------

from typing import Optional, List
import re
from io import BytesIO
from urllib.parse import quote
import pandas as pd
import streamlit as st

# -----------------------------
# ุชููุฆุฉ ุงูุตูุญุฉ + ุฏุนู RTL
# -----------------------------
st.set_page_config(
    page_title="ููููููุฏ ุฑูุงุจุท ูุงุชุณุงุจ ููุฃูุฑุฏุฑุงุช",
    page_icon="๐ข",
    layout="wide",
)

st.markdown("""
<style>
html, body, [class*="css"]  { direction: rtl; text-align: right; }
[data-testid="stMetricValue"] { direction:ltr; }
</style>
""", unsafe_allow_html=True)

st.title("๐ข ููููููุฏ ุฑูุงุจุท ูุงุชุณุงุจ ููุฃูุฑุฏุฑุงุช")
st.caption("ุญููู ููู ุงูุฅูุณู ููู ุงููุฎุทุท ุงููุญุฏุฏุ ูุณูุชู ุงุณุชุฎุฑุงุฌ ุงูุฃุฑูุงู ูุจูุงุก ุฌููุฉ ุงููููุงุช ูุฏูุฌูุง ูู ุฑุณุงูุฉ ุนุฑุจูุฉ ุฌุงูุฒุฉ ุฏุงุฎู ุฑุงุจุท ูุงุชุณุงุจ. ุงูุฑูุงุจุท ุชูุนุฑุถ ูุฃุฒุฑุงุฑ.")

# -----------------------------
# ุซูุงุจุช ุงูุฃุนูุฏุฉ (ููุฑุณ ูุจุฏุฃ ูู 0)
# -----------------------------
NOTES_COL_IDX = 0       # ุงูุนููุฏ 1: ููุงุญุธุงุช
TOTAL_COL_IDX = 3       # ุงูุนููุฏ 4: ุงูุฅุฌูุงูู
ITEMS_START_IDX = 4     # ุงูุนููุฏ 5: ุจุฏุงูุฉ ุงูุฃุนูุฏุฉ ุงูุฎุงุตุฉ ุจุงูุฃุตูุงู
ITEMS_END_IDX_INC = 11  # ุงูุนููุฏ 12 (ุดุงูู)

# -----------------------------
# ุงููุงูุจ ุงูุนุฑุจู (ุซุงุจุช ููุง ุทููุจุช)
# -----------------------------
AR_TEMPLATE_FIXED = (
    "ุงูุณูุงู ุนูููู ูุฑุญูุฉ ุงููู ุจุงููู ุญุถุฑุชู ุจุฎุตูุต ุงูุฑุฏุฑ ุฒุจุฏู ุงููุตุฑููู. "
    "ุงูุฑุฏุฑ ุญุถุฑุชู ูุชุงุญ ููุชูุตูู ุบุฏุง ุงู ุดุงุก ุงููู ูู 4ุงูู8ู ูู ููุงุณุจ ูุญุถุฑุชู ุงุณุชุงุฐูู ุงูููููุดู "
    "ุงูุฑุฏุฑ ุญุถุฑุชู : {quantity} ุงูุงุฌูุงูู {total} ,,,"
)

# -----------------------------
# ุฏูุงู ุงูููุจุงูู ูุงูุฑูุงุจุท
# -----------------------------
EG_MOBILE_REGEX = re.compile(r'(?:\+?20)?0?1\d{9}')  # ููุจู +20/20/01

def normalize_eg_phone(text: str) -> Optional[str]:
    """ุฅูุฌุงุฏ ุฑูู ููุจุงูู ูุตุฑู ุฏุงุฎู ุงููุต ูุชุญูููู ูุตูุบุฉ ุฃุฑูุงู ุฏูููุฉ ุจุฏูู + : 201XXXXXXXXX"""
    if text is None:
        return None
    s = str(text)
    m = EG_MOBILE_REGEX.search(s)
    if not m:
        return None
    digits = re.sub(r"\D", "", m.group())

    # ุชุญููู ููุตูุบุฉ ุงูุฏูููุฉ 201XXXXXXXXX
    if digits.startswith("0") and len(digits) == 11:
        digits = "20" + digits[1:]
    elif digits.startswith("20") and len(digits) == 12:
        pass
    elif digits.startswith("1") and len(digits) == 10:
        digits = "20" + digits
    else:
        return None

    if not (digits.startswith("201") and len(digits) == 12):
        return None
    return digits  # ูุซุงู: 2010XXXXXXXX

def extract_first_phone_from_row(row: pd.Series) -> Optional[str]:
    """ููุชุด ูู ุฎูุงูุง ุงูุตู ููุนูุฏ ุฃูู ุฑูู ูุตุฑู ุตุงูุญ ุจุตูุบุฉ 201XXXXXXXXX"""
    for val in row:
        digits = normalize_eg_phone(val)
        if digits:
            return digits
    return None

def encode_for_whatsapp(text: str) -> str:
    """ุชุฑููุฒ ูุต ุงูุฑุณุงูุฉ ููุชูุฑูุฑ ูู ?text= (ูุฏุนู ุงูุนุฑุจูุฉ ูุงูุฃุณุทุฑ ุงูุฌุฏูุฏุฉ)"""
    return quote(text, safe="")

def build_wa_link(phone_digits: str, message: str) -> str:
    base = f"https://wa.me/{phone_digits}"
    if message and message.strip():
        return f"{base}?text={encode_for_whatsapp(message)}"
    return base

# -----------------------------
# ุจูุงุก ุฌููุฉ ุงููููุงุช ุญุณุจ ุงููุฎุทุท
# -----------------------------
def build_quantity_phrase(row: pd.Series, headers: List[str]) -> str:
    """
    ุชูููููู ุฌููุฉ ุงููููุงุช ุจุงูุดูู:
      "[ููุงุญุธุงุช ุฅู ูุฌุฏุช]ุ ุตูู1: ูููุฉุ ุตูู2: ูููุฉุ ..."
    - ุงูููุงุญุธุงุช (ุงูุนููุฏ 1) ุชูุถููู ููุง ูู.
    - ุงูุฃุนูุฏุฉ 5..12: ุฅุฐุง ุงููููุฉ ุฑูู>0 ุฃู ูุต ุบูุฑ ูุงุฑุบ -> ุชูุถุงู "ุงุณู ุงูุตูู: ุงููููุฉ".
    """
    parts: List[str] = []

    # ููุงุญุธุงุช
    note = row.iat[NOTES_COL_IDX] if len(row) > NOTES_COL_IDX else None
    if pd.notna(note) and str(note).strip():
        parts.append(str(note).strip())

    # ุฃุตูุงู ูู 5 ุฅูู 12 (ุดุงูู)
    start, end_inc = ITEMS_START_IDX, ITEMS_END_IDX_INC
    upper = min(end_inc, len(row) - 1)
    for idx in range(start, upper + 1):
        item_name = headers[idx] if idx < len(headers) else f"ุตูู {idx+1}"
        val = row.iat[idx] if idx < len(row) else None
        if pd.isna(val):
            continue
        sval = str(val).strip()
        if not sval:
            continue
        # ุชุฌุงูู ุตูุฑ ุตุฑูุญ
        if sval in ("0", "0.0"):
            continue
        parts.append(f"{item_name}: {sval}")

    return "ุ ".join(parts)

# -----------------------------
# ุชุตุฏูุฑ ููู ุฅูุณู ุจุนููุฏูู ููุท
# -----------------------------
def to_excel_two_cols(df: pd.DataFrame, make_clickable: bool = True) -> bytes:
    out_df = df[["ุฑูู ุงููุงุชู", "ุฑุงุจุท ูุงุชุณุงุจ"]].copy()
    if make_clickable:
        out_df["ุฑุงุจุท ูุงุชุณุงุจ"] = out_df["ุฑุงุจุท ูุงุชุณุงุจ"].apply(
            lambda url: f'=HYPERLINK("{url}", "ูุชุญ ูุงุชุณุงุจ")'
        )
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
        out_df.to_excel(writer, index=False, sheet_name="WhatsApp")
    buffer.seek(0)
    return buffer.getvalue()

# -----------------------------
# ูุงุฌูุฉ ุงููุณุชุฎุฏู
# -----------------------------
st.subheader("ุฑูุน ููู ุงูุฅูุณู")
file = st.file_uploader("ุงุฎุชุฑ ููู .xlsx (ุงูุตู ุงูุฃูู ูุญูู ุนูุงููู ุงูุฃุนูุฏุฉ/ุฃุณูุงุก ุงูุฃุตูุงู)", type=["xlsx"])

if file:
    try:
        # ููุฑุฃ ุงูุนูุงููู ูู ุงูุตู ุงูุฃูู (header=0)
        df = pd.read_excel(file, dtype=str, header=0, engine="openpyxl")
    except ImportError:
        st.error("ูุฐุง ุงูุชุทุจูู ูุญุชุงุฌ ุงูุญุฒูุฉ 'openpyxl' ููุฑุงุกุฉ ูููุงุช .xlsx. ุฃุถููุง ุฅูู requirements.txt ุซู ุฃุนุฏ ุงููุดุฑ.")
        st.stop()
    except Exception as e:
        st.error(f"ุชุนุฐุฑ ูุฑุงุกุฉ ุงูููู: {e}")
        st.stop()

    st.write("ูุนุงููุฉ ุฃูู 20 ุตููุง:")
    st.dataframe(df.head(20), width="stretch")

    # ุงูุชุญูู ุงููุจุฏุฆู ูู ุนุฏุฏ ุงูุฃุนูุฏุฉ
    if df.shape[1] < ITEMS_END_IDX_INC + 1:
        st.warning("ุงูููู ูุง ูุญุชูู ุนูู ุงูุฃุนูุฏุฉ ุงููุทููุจุฉ ุญุชู ุงูุนููุฏ 12. ุชุญูู ูู ุงููุฎุทุท (ููุงุญุธุงุชุ ุฅุฌูุงูู ูู ุงูุนููุฏ 4ุ ุงูุฃุตูุงู ูู 5 ุฅูู 12).")

    headers: List[str] = list(df.columns)

    # ูุนุงูุฌุฉ ุงูุตููู โ ุฑุณุงุฆู + ุฑูุงุจุท
    rows_out = []
    seen_phones = set()

    for _, row in df.iterrows():
        # 1) ุฑูู ุงููุงุชู (ููุณุชุฎุฑุฌ ูู ุฃู ุนููุฏ)
        phone_digits = extract_first_phone_from_row(row)
        if not phone_digits:
            continue  # ูุง ููุฌุฏ ุฑูู ุตุงูุญ

        phone_display = f"+{phone_digits}"

        # 2) ุงูุฅุฌูุงูู (ุงูุนููุฏ 4)
        total_val = row.iat[TOTAL_COL_IDX] if len(row) > TOTAL_COL_IDX else ""
        total_str = "" if pd.isna(total_val) else str(total_val).strip()

        # 3) ุฌููุฉ ุงููููุงุช (ููุงุญุธุงุช + ุฃุตูุงู 5..12)
        quantity_phrase = build_quantity_phrase(row, headers)

        # 4) ุงูุฑุณุงูุฉ ุงูุนุฑุจูุฉ ุงูุซุงุจุชุฉ
        msg = AR_TEMPLATE_FIXED.format(quantity=quantity_phrase, total=total_str)

        # 5) ุฑุงุจุท ูุงุชุณุงุจ ูุน ?text=
        wa_link = build_wa_link(phone_digits, msg)

        # ููุน ุงูุชูุฑุงุฑ ูููุณ ุงูุฑูู
        if phone_display in seen_phones:
            continue
        seen_phones.add(phone_display)

        rows_out.append({
            "ุฑูู ุงููุงุชู": phone_display,
            "ุงูุฑุณุงูุฉ (ูููุนุงููุฉ)": msg,
            "ุฑุงุจุท ูุงุชุณุงุจ": wa_link,
            "ุชู": False,
        })

    result_df = pd.DataFrame(rows_out, columns=["ุฑูู ุงููุงุชู", "ุงูุฑุณุงูุฉ (ูููุนุงููุฉ)", "ุฑุงุจุท ูุงุชุณุงุจ", "ุชู"])

    st.metric("ุนุฏุฏ ุงูุฃุฑูุงู ุงูุตุงูุญุฉ", len(result_df))

    # ----------------- ุนุฑุถ ุงูุฃุฒุฑุงุฑ ุจุฏู ุนููุฏ ุงูุฑุงุจุท -----------------
    st.divider()
    st.subheader("ุงููุชูุฌุฉ")
    st.caption("ุถุน โ๏ธ ูู ุนููุฏ (ุชู) ุฃุซูุงุก ุงูุนูู. ุงูุฑูุงุจุท ุชููุชุญ ุนุจุฑ ุฃุฒุฑุงุฑ ููู ุนููู.")

    # ูุนุฑุถ ููุท ุฑูู ุงููุงุชู + ุชู (ุจุฏูู ุนููุฏ ุงูุฑุงุจุท)
    edited_df = st.data_editor(
        result_df[["ุฑูู ุงููุงุชู", "ุชู"]],
        width="stretch",
        num_rows="fixed",
        hide_index=True,
        column_config={
            "ุชู": st.column_config.CheckboxColumn("ุชู", help="ุชุญุฏูุฏ ุงูุทูุจ ูููุชูู"),
        },
        key="editor_upload"
    )

    # ุฃุฒุฑุงุฑ ูุงุชุณุงุจ ููู ุตู (ูุน ูุนุงููุฉ ุงูุฑุณุงูุฉ)
    st.markdown("### ุฃุฒุฑุงุฑ ูุงุชุณุงุจ ููู ุนููู")
    for _, r in result_df.iterrows():
        with st.expander(f"๐จ {r['ุฑูู ุงููุงุชู']}", expanded=False):
            st.code(r["ุงูุฑุณุงูุฉ (ูููุนุงููุฉ)"], language="text")
            st.link_button("ูุชุญ ูุงุชุณุงุจ", r["ุฑุงุจุท ูุงุชุณุงุจ"], type="primary", help="ูุชุญ ูุญุงุฏุซุฉ ูุงุชุณุงุจ ูุน ุงูุฑุณุงูุฉ")

    # ----------------- ุงูุชูุฒูู: ุนููุฏุงู ููุท -----------------
    st.divider()
    st.subheader("ุชุญููู ููู ุงููุชุงุฆุฌ")
    st.caption("ุณูุชู ุชูุฒูู ููู ุฅูุณู ูุญุชูู **ุนููุฏูู ููุท**: (ุฑูู ุงููุงุชูุ ุฑุงุจุท ูุงุชุณุงุจ).")

    make_clickable = st.toggle("ุฌุนู ุงูุฑูุงุจุท ูุงุจูุฉ ููููุฑ ุฏุงุฎู Excel (HYPERLINK)", value=True, key="clickable_upload")
    excel_bytes = to_excel_two_cols(result_df, make_clickable=make_clickable)

    st.download_button(
        label="โฌ๏ธ ุชูุฒูู ููู (ุฑูู ุงููุงุชูุ ุฑุงุจุท ูุงุชุณุงุจ)",
        data=excel_bytes,
        file_name="whatsapp_orders.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )

else:
    st.info("ูู ูุถูู ุงุฑูุน ููู .xlsx ุญุณุจ ุงููุฎุทุท: ุงูุนููุฏ 1 ููุงุญุธุงุชุ ุงูุนููุฏ 4 ุฅุฌูุงููุ ุงูุฃุนูุฏุฉ 5..12 ุฃุตูุงู (ุฃุณูุงุก ุงูุฃุตูุงู ูู ุงูุตู ุงูุฃูู).")

# ุชุฐููู
st.caption("ุชู ุจุฅ โค๏ธ ุจุงุณุชุฎุฏุงู Streamlit.")
